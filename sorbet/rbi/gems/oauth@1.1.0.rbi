# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `oauth` gem.
# Please instead update this file by running `bin/tapioca gem oauth`.

# source://oauth//lib/oauth/client/net_http.rb#7
class Net::HTTPGenericRequest
  include ::OAuth::Helper

  # Add the OAuth information to an HTTP request. Depending on the <tt>options[:scheme]</tt> setting
  # this may add a header, additional query string parameters, or additional POST body parameters.
  # The default scheme is +header+, in which the OAuth parameters as put into the +Authorization+
  # header.
  #
  # * http - Configured Net::HTTP instance
  # * consumer - OAuth::Consumer instance
  # * token - OAuth::Token instance
  # * options - Request-specific options (e.g. +request_uri+, +consumer+, +token+, +scheme+,
  #   +signature_method+, +nonce+, +timestamp+, +body_hash+)
  #
  # This method also modifies the <tt>User-Agent</tt> header to add the OAuth gem version.
  #
  # See Also: {OAuth core spec version 1.0, section 5.4.1}[http://oauth.net/core/1.0#rfc.section.5.4.1],
  #           {OAuth Request Body Hash 1.0 Draft 4}[http://oauth.googlecode.com/svn/spec/ext/body_hash/1.0/drafts/4/spec.html,
  #                                                 http://oauth.googlecode.com/svn/spec/ext/body_hash/1.0/oauth-bodyhash.html#when_to_include]
  #
  # source://oauth//lib/oauth/client/net_http.rb#28
  def oauth!(http, consumer = T.unsafe(nil), token = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the value of attribute oauth_helper.
  #
  # source://oauth//lib/oauth/client/net_http.rb#10
  def oauth_helper; end

  # Create a string suitable for signing for an HTTP request. This process involves parameter
  # normalization as specified in the OAuth specification. The exact normalization also depends
  # on the <tt>options[:scheme]</tt> being used so this must match what will be used for the request
  # itself. The default scheme is +header+, in which the OAuth parameters as put into the +Authorization+
  # header.
  #
  # * http - Configured Net::HTTP instance
  # * consumer - OAuth::Consumer instance
  # * token - OAuth::Token instance
  # * options - Request-specific options (e.g. +request_uri+, +consumer+, +token+, +scheme+,
  #   +signature_method+, +nonce+, +timestamp+)
  #
  # See Also: {OAuth core spec version 1.0, section 5.4.1}[http://oauth.net/core/1.0#rfc.section.5.4.1],
  #           {OAuth Request Body Hash 1.0 Draft 4}[http://oauth.googlecode.com/svn/spec/ext/body_hash/1.0/drafts/4/spec.html,
  #                                                 http://oauth.googlecode.com/svn/spec/ext/body_hash/1.0/oauth-bodyhash.html#when_to_include]
  #
  # source://oauth//lib/oauth/client/net_http.rb#51
  def signature_base_string(http, consumer = T.unsafe(nil), token = T.unsafe(nil), options = T.unsafe(nil)); end

  private

  # @return [Boolean]
  #
  # source://oauth//lib/oauth/client/net_http.rb#91
  def oauth_body_hash_required?(options); end

  # source://oauth//lib/oauth/client/net_http.rb#71
  def oauth_full_request_uri(http, options); end

  # source://oauth//lib/oauth/client/net_http.rb#60
  def oauth_helper_options(http, consumer, token, options); end

  # FIXME: if you're using a POST body and query string parameters, this method
  # will move query string parameters into the body unexpectedly. This may
  # cause problems with non-x-www-form-urlencoded bodies submitted to URLs
  # containing query string params. If duplicate parameters are present in both
  # places, all instances should be included when calculating the signature
  # base string.
  #
  # source://oauth//lib/oauth/client/net_http.rb#106
  def set_oauth_body; end

  # source://oauth//lib/oauth/client/net_http.rb#95
  def set_oauth_header; end

  # source://oauth//lib/oauth/client/net_http.rb#114
  def set_oauth_query_string; end
end

# source://oauth//lib/oauth/version.rb#3
module OAuth; end

# The Access Token is used for the actual "real" web service calls that you perform against the server
#
# source://oauth//lib/oauth/tokens/access_token.rb#5
class OAuth::AccessToken < ::OAuth::ConsumerToken
  # Make a regular DELETE request using AccessToken
  #
  #   @response = @token.delete('/people/123')
  #   @response = @token.delete('/people/123', { 'Accept' => 'application/xml' })
  #
  # source://oauth//lib/oauth/tokens/access_token.rb#81
  def delete(path, headers = T.unsafe(nil)); end

  # Make a regular GET request using AccessToken
  #
  #   @response = @token.get('/people')
  #   @response = @token.get('/people', { 'Accept'=>'application/xml' })
  #
  # source://oauth//lib/oauth/tokens/access_token.rb#28
  def get(path, headers = T.unsafe(nil)); end

  # Make a regular HEAD request using AccessToken
  #
  #   @response = @token.head('/people')
  #
  # source://oauth//lib/oauth/tokens/access_token.rb#36
  def head(path, headers = T.unsafe(nil)); end

  # Make a regular PATCH request using AccessToken
  #
  #   @response = @token.patch('/people/123')
  #   @response = @token.patch('/people/123', { :name => 'Bob', :email => 'bob@mailinator.com' })
  #   @response = @token.patch('/people/123', { :name => 'Bob', :email => 'bob@mailinator.com' }, { 'Accept' => 'application/xml' })
  #   @response = @token.patch('/people/123', nil, { 'Accept' => 'application/xml' })
  #   @response = @token.patch('/people/123', @person.to_xml, { 'Accept' => 'application/xml', 'Content-Type' => 'application/xml' })
  #
  # source://oauth//lib/oauth/tokens/access_token.rb#72
  def patch(path, body = T.unsafe(nil), headers = T.unsafe(nil)); end

  # Make a regular POST request using AccessToken
  #
  #   @response = @token.post('/people')
  #   @response = @token.post('/people', { :name => 'Bob', :email => 'bob@mailinator.com' })
  #   @response = @token.post('/people', { :name => 'Bob', :email => 'bob@mailinator.com' }, { 'Accept' => 'application/xml' })
  #   @response = @token.post('/people', nil, {'Accept' => 'application/xml' })
  #   @response = @token.post('/people', @person.to_xml, { 'Accept'=>'application/xml', 'Content-Type' => 'application/xml' })
  #
  # source://oauth//lib/oauth/tokens/access_token.rb#48
  def post(path, body = T.unsafe(nil), headers = T.unsafe(nil)); end

  # Make a regular PUT request using AccessToken
  #
  #   @response = @token.put('/people/123')
  #   @response = @token.put('/people/123', { :name => 'Bob', :email => 'bob@mailinator.com' })
  #   @response = @token.put('/people/123', { :name => 'Bob', :email => 'bob@mailinator.com' }, { 'Accept' => 'application/xml' })
  #   @response = @token.put('/people/123', nil, { 'Accept' => 'application/xml' })
  #   @response = @token.put('/people/123', @person.to_xml, { 'Accept' => 'application/xml', 'Content-Type' => 'application/xml' })
  #
  # source://oauth//lib/oauth/tokens/access_token.rb#60
  def put(path, body = T.unsafe(nil), headers = T.unsafe(nil)); end

  # The less intrusive way. Otherwise, if we are to do it correctly inside consumer,
  # we need to restructure and touch more methods: request(), sign!(), etc.
  #
  # source://oauth//lib/oauth/tokens/access_token.rb#8
  def request(http_method, path, *arguments); end
end

# source://oauth//lib/oauth/client.rb#4
module OAuth::Client; end

# source://oauth//lib/oauth/client/helper.rb#11
class OAuth::Client::Helper
  include ::OAuth::Helper

  # @return [Helper] a new instance of Helper
  #
  # source://oauth//lib/oauth/client/helper.rb#14
  def initialize(request, options = T.unsafe(nil)); end

  # source://oauth//lib/oauth/client/helper.rb#73
  def amend_user_agent_header(headers); end

  # source://oauth//lib/oauth/client/helper.rb#69
  def hash_body; end

  # source://oauth//lib/oauth/client/helper.rb#83
  def header; end

  # source://oauth//lib/oauth/client/helper.rb#22
  def nonce; end

  # source://oauth//lib/oauth/client/helper.rb#30
  def oauth_parameters; end

  # Returns the value of attribute options.
  #
  # source://oauth//lib/oauth/client/helper.rb#20
  def options; end

  # source://oauth//lib/oauth/client/helper.rb#93
  def parameters; end

  # source://oauth//lib/oauth/client/helper.rb#97
  def parameters_with_oauth; end

  # source://oauth//lib/oauth/client/helper.rb#51
  def signature(extra_options = T.unsafe(nil)); end

  # source://oauth//lib/oauth/client/helper.rb#58
  def signature_base_string(extra_options = T.unsafe(nil)); end

  # source://oauth//lib/oauth/client/helper.rb#26
  def timestamp; end

  # @return [Boolean]
  #
  # source://oauth//lib/oauth/client/helper.rb#65
  def token_request?; end
end

# source://oauth//lib/oauth/consumer.rb#11
class OAuth::Consumer
  # Create a new consumer instance by passing it a configuration hash:
  #
  #   @consumer = OAuth::Consumer.new(key, secret, {
  #     :site               => "http://term.ie",
  #     :scheme             => :header,
  #     :http_method        => :post,
  #     :request_token_path => "/oauth/example/request_token.php",
  #     :access_token_path  => "/oauth/example/access_token.php",
  #     :authorize_path     => "/oauth/example/authorize.php",
  #     :body_hash_enabled  => false
  #    })
  #
  # Start the process by requesting a token
  #
  #   @request_token = @consumer.get_request_token
  #   session[:request_token] = @request_token
  #   redirect_to @request_token.authorize_url
  #
  # When user returns create an access_token
  #
  #   @access_token = @request_token.get_access_token
  #   @photos=@access_token.get('/photos.xml')
  #
  # @return [Consumer] a new instance of Consumer
  #
  # source://oauth//lib/oauth/consumer.rb#103
  def initialize(consumer_key, consumer_secret, options = T.unsafe(nil)); end

  # source://oauth//lib/oauth/consumer.rb#310
  def access_token_path; end

  # source://oauth//lib/oauth/consumer.rb#339
  def access_token_url; end

  # @return [Boolean]
  #
  # source://oauth//lib/oauth/consumer.rb#343
  def access_token_url?; end

  # source://oauth//lib/oauth/consumer.rb#302
  def authenticate_path; end

  # source://oauth//lib/oauth/consumer.rb#323
  def authenticate_url; end

  # @return [Boolean]
  #
  # source://oauth//lib/oauth/consumer.rb#327
  def authenticate_url?; end

  # source://oauth//lib/oauth/consumer.rb#306
  def authorize_path; end

  # source://oauth//lib/oauth/consumer.rb#331
  def authorize_url; end

  # @return [Boolean]
  #
  # source://oauth//lib/oauth/consumer.rb#335
  def authorize_url?; end

  # Creates and signs an http request.
  # It's recommended to use the Token classes to set this up correctly
  #
  # source://oauth//lib/oauth/consumer.rb#229
  def create_signed_request(http_method, path, token = T.unsafe(nil), request_options = T.unsafe(nil), *arguments); end

  # source://oauth//lib/oauth/consumer.rb#117
  def debug_output; end

  # source://oauth//lib/oauth/consumer.rb#142
  def get_access_token(request_token, request_options = T.unsafe(nil), *arguments, &block); end

  # Makes a request to the service for a new OAuth::RequestToken
  #
  #  @request_token = @consumer.get_request_token
  #
  # To include OAuth parameters:
  #
  #  @request_token = @consumer.get_request_token \
  #    :oauth_callback => "http://example.com/cb"
  #
  # To include application-specific parameters:
  #
  #  @request_token = @consumer.get_request_token({}, :foo => "bar")
  #
  # TODO oauth_callback should be a mandatory parameter
  #
  # source://oauth//lib/oauth/consumer.rb#162
  def get_request_token(request_options = T.unsafe(nil), *arguments, &block); end

  # The HTTP object for the site. The HTTP Object is what you get when you do Net::HTTP.new
  #
  # source://oauth//lib/oauth/consumer.rb#128
  def http; end

  # Sets the attribute http
  #
  # @param value the value to set the attribute http to.
  #
  # source://oauth//lib/oauth/consumer.rb#78
  def http=(_arg0); end

  # The default http method
  #
  # source://oauth//lib/oauth/consumer.rb#113
  def http_method; end

  # Returns the value of attribute key.
  #
  # source://oauth//lib/oauth/consumer.rb#77
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://oauth//lib/oauth/consumer.rb#77
  def key=(_arg0); end

  # Returns the value of attribute options.
  #
  # source://oauth//lib/oauth/consumer.rb#77
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://oauth//lib/oauth/consumer.rb#77
  def options=(_arg0); end

  # source://oauth//lib/oauth/consumer.rb#347
  def proxy; end

  # Creates, signs and performs an http request.
  # It's recommended to use the OAuth::Token classes to set this up correctly.
  # request_options take precedence over consumer-wide options when signing
  #   a request.
  # arguments are POST and PUT bodies (a Hash, string-encoded parameters, or
  #   absent), followed by additional HTTP headers.
  #
  #   @consumer.request(:get,  '/people', @token, { :scheme => :query_string })
  #   @consumer.request(:post, '/people', @token, {}, @person.to_xml, { 'Content-Type' => 'application/xml' })
  #
  # source://oauth//lib/oauth/consumer.rb#193
  def request(http_method, path, token = T.unsafe(nil), request_options = T.unsafe(nil), *arguments); end

  # source://oauth//lib/oauth/consumer.rb#288
  def request_endpoint; end

  # source://oauth//lib/oauth/consumer.rb#298
  def request_token_path; end

  # TODO: this is ugly, rewrite
  #
  # source://oauth//lib/oauth/consumer.rb#315
  def request_token_url; end

  # @return [Boolean]
  #
  # source://oauth//lib/oauth/consumer.rb#319
  def request_token_url?; end

  # source://oauth//lib/oauth/consumer.rb#294
  def scheme; end

  # Returns the value of attribute secret.
  #
  # source://oauth//lib/oauth/consumer.rb#77
  def secret; end

  # Sets the attribute secret
  #
  # @param value the value to set the attribute secret to.
  #
  # source://oauth//lib/oauth/consumer.rb#77
  def secret=(_arg0); end

  # Sign the Request object. Use this if you have an externally generated http request object you want to sign.
  #
  # source://oauth//lib/oauth/consumer.rb#275
  def sign!(request, token = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Return the signature_base_string
  #
  # source://oauth//lib/oauth/consumer.rb#280
  def signature_base_string(request, token = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # source://oauth//lib/oauth/consumer.rb#284
  def site; end

  # Sets the attribute site
  #
  # @param value the value to set the attribute site to.
  #
  # source://oauth//lib/oauth/consumer.rb#78
  def site=(_arg0); end

  # Creates a request and parses the result as url_encoded. This is used internally for the RequestToken and AccessToken requests.
  #
  # source://oauth//lib/oauth/consumer.rb#236
  def token_request(http_method, path, token = T.unsafe(nil), request_options = T.unsafe(nil), *arguments); end

  # Contains the root URI for this site
  #
  # source://oauth//lib/oauth/consumer.rb#133
  def uri(custom_uri = T.unsafe(nil)); end

  protected

  # Instantiates the http object
  #
  # source://oauth//lib/oauth/consumer.rb#354
  def create_http(_url = T.unsafe(nil)); end

  # create the http request object for a given http_method and path
  #
  # source://oauth//lib/oauth/consumer.rb#400
  def create_http_request(http_method, path, *arguments); end

  # source://oauth//lib/oauth/consumer.rb#455
  def marshal_dump(*_args); end

  # source://oauth//lib/oauth/consumer.rb#459
  def marshal_load(data); end
end

# source://oauth//lib/oauth/consumer.rb#26
OAuth::Consumer::CA_FILE = T.let(T.unsafe(nil), String)

# source://oauth//lib/oauth/consumer.rb#22
OAuth::Consumer::CA_FILES = T.let(T.unsafe(nil), Array)

# Superclass for tokens used by OAuth Clients
#
# source://oauth//lib/oauth/tokens/consumer_token.rb#5
class OAuth::ConsumerToken < ::OAuth::Token
  # @return [ConsumerToken] a new instance of ConsumerToken
  #
  # source://oauth//lib/oauth/tokens/consumer_token.rb#15
  def initialize(consumer, token = T.unsafe(nil), secret = T.unsafe(nil)); end

  # Returns the value of attribute consumer.
  #
  # source://oauth//lib/oauth/tokens/consumer_token.rb#6
  def consumer; end

  # Sets the attribute consumer
  #
  # @param value the value to set the attribute consumer to.
  #
  # source://oauth//lib/oauth/tokens/consumer_token.rb#6
  def consumer=(_arg0); end

  # Returns the value of attribute params.
  #
  # source://oauth//lib/oauth/tokens/consumer_token.rb#6
  def params; end

  # Sets the attribute params
  #
  # @param value the value to set the attribute params to.
  #
  # source://oauth//lib/oauth/tokens/consumer_token.rb#6
  def params=(_arg0); end

  # Make a signed request using given http_method to the path
  #
  #   @token.request(:get,  '/people')
  #   @token.request(:post, '/people', @person.to_xml, { 'Content-Type' => 'application/xml' })
  #
  # source://oauth//lib/oauth/tokens/consumer_token.rb#26
  def request(http_method, path, *arguments); end

  # Returns the value of attribute response.
  #
  # source://oauth//lib/oauth/tokens/consumer_token.rb#7
  def response; end

  # Sign a request generated elsewhere using Net:HTTP::Post.new or friends
  #
  # source://oauth//lib/oauth/tokens/consumer_token.rb#31
  def sign!(request, options = T.unsafe(nil)); end

  class << self
    # source://oauth//lib/oauth/tokens/consumer_token.rb#9
    def from_hash(consumer, hash); end
  end
end

# source://oauth//lib/oauth/errors/error.rb#4
class OAuth::Error < ::StandardError; end

# source://oauth//lib/oauth/helper.rb#8
module OAuth::Helper
  private

  # source://oauth//lib/oauth/helper.rb#20
  def _escape(string); end

  # Escape +value+ by URL encoding all non-reserved character.
  #
  # See Also: {OAuth core spec version 1.0, section 5.1}[http://oauth.net/core/1.0#rfc.section.5.1]
  #
  # source://oauth//lib/oauth/helper.rb#14
  def escape(value); end

  # Generate a random key of up to +size+ bytes. The value returned is Base64 encoded with non-word
  # characters removed.
  #
  # source://oauth//lib/oauth/helper.rb#30
  def generate_key(size = T.unsafe(nil)); end

  # source://oauth//lib/oauth/helper.rb#30
  def generate_nonce(size = T.unsafe(nil)); end

  # source://oauth//lib/oauth/helper.rb#36
  def generate_timestamp; end

  # Normalize a +Hash+ of parameter values. Parameters are sorted by name, using lexicographical
  # byte value ordering. If two or more parameters share the same name, they are sorted by their value.
  # Parameters are concatenated in their sorted order into a single string. For each parameter, the name
  # is separated from the corresponding value by an "=" character, even if the value is empty. Each
  # name-value pair is separated by an "&" character.
  #
  # See Also: {OAuth core spec version 1.0, section 9.1.1}[http://oauth.net/core/1.0#rfc.section.9.1.1]
  #
  # source://oauth//lib/oauth/helper.rb#47
  def normalize(params); end

  # Returns a string representation of the Hash like in URL query string
  # build_nested_query({:level_1 => {:level_2 => ['value_1','value_2']}}, 'prefix'))
  #   #=> ["prefix%5Blevel_1%5D%5Blevel_2%5D%5B%5D=value_1", "prefix%5Blevel_1%5D%5Blevel_2%5D%5B%5D=value_2"]
  #
  # source://oauth//lib/oauth/helper.rb#72
  def normalize_nested_query(value, prefix = T.unsafe(nil)); end

  # Parse an Authorization / WWW-Authenticate header into a hash. Takes care of unescaping and
  # removing surrounding quotes. Raises a OAuth::Problem if the header is not parsable into a
  # valid hash. Does not validate the keys or values.
  #
  #   hash = parse_header(headers['Authorization'] || headers['WWW-Authenticate'])
  #   hash['oauth_timestamp']
  #     #=>"1234567890"
  #
  # source://oauth//lib/oauth/helper.rb#95
  def parse_header(header); end

  # source://oauth//lib/oauth/helper.rb#113
  def stringify_keys(hash); end

  # source://oauth//lib/oauth/helper.rb#24
  def unescape(value); end

  class << self
    # source://oauth//lib/oauth/helper.rb#20
    def _escape(string); end

    # Escape +value+ by URL encoding all non-reserved character.
    #
    # See Also: {OAuth core spec version 1.0, section 5.1}[http://oauth.net/core/1.0#rfc.section.5.1]
    #
    # source://oauth//lib/oauth/helper.rb#14
    def escape(value); end

    # Generate a random key of up to +size+ bytes. The value returned is Base64 encoded with non-word
    # characters removed.
    #
    # source://oauth//lib/oauth/helper.rb#30
    def generate_key(size = T.unsafe(nil)); end

    # source://oauth//lib/oauth/helper.rb#36
    def generate_timestamp; end

    # Normalize a +Hash+ of parameter values. Parameters are sorted by name, using lexicographical
    # byte value ordering. If two or more parameters share the same name, they are sorted by their value.
    # Parameters are concatenated in their sorted order into a single string. For each parameter, the name
    # is separated from the corresponding value by an "=" character, even if the value is empty. Each
    # name-value pair is separated by an "&" character.
    #
    # See Also: {OAuth core spec version 1.0, section 9.1.1}[http://oauth.net/core/1.0#rfc.section.9.1.1]
    #
    # source://oauth//lib/oauth/helper.rb#47
    def normalize(params); end

    # Returns a string representation of the Hash like in URL query string
    # build_nested_query({:level_1 => {:level_2 => ['value_1','value_2']}}, 'prefix'))
    #   #=> ["prefix%5Blevel_1%5D%5Blevel_2%5D%5B%5D=value_1", "prefix%5Blevel_1%5D%5Blevel_2%5D%5B%5D=value_2"]
    #
    # source://oauth//lib/oauth/helper.rb#72
    def normalize_nested_query(value, prefix = T.unsafe(nil)); end

    # Parse an Authorization / WWW-Authenticate header into a hash. Takes care of unescaping and
    # removing surrounding quotes. Raises a OAuth::Problem if the header is not parsable into a
    # valid hash. Does not validate the keys or values.
    #
    #   hash = parse_header(headers['Authorization'] || headers['WWW-Authenticate'])
    #   hash['oauth_timestamp']
    #     #=>"1234567890"
    #
    # @raise [OAuth::Problem]
    #
    # source://oauth//lib/oauth/helper.rb#95
    def parse_header(header); end

    # source://oauth//lib/oauth/helper.rb#113
    def stringify_keys(hash); end

    # source://oauth//lib/oauth/helper.rb#24
    def unescape(value); end
  end
end

# request tokens are passed between the consumer and the provider out of
# band (i.e. callbacks cannot be used), per section 6.1.1
#
# source://oauth//lib/oauth/oauth.rb#6
OAuth::OUT_OF_BAND = T.let(T.unsafe(nil), String)

# required parameters, per sections 6.1.1, 6.3.1, and 7
#
# source://oauth//lib/oauth/oauth.rb#9
OAuth::PARAMETERS = T.let(T.unsafe(nil), Array)

# source://oauth//lib/oauth/errors/problem.rb#4
class OAuth::Problem < ::OAuth::Unauthorized
  # @return [Problem] a new instance of Problem
  #
  # source://oauth//lib/oauth/errors/problem.rb#7
  def initialize(problem, request = T.unsafe(nil), params = T.unsafe(nil)); end

  # Returns the value of attribute params.
  #
  # source://oauth//lib/oauth/errors/problem.rb#5
  def params; end

  # Returns the value of attribute problem.
  #
  # source://oauth//lib/oauth/errors/problem.rb#5
  def problem; end

  # source://oauth//lib/oauth/errors/problem.rb#13
  def to_s; end
end

# reserved character regexp, per section 5.1
#
# source://oauth//lib/oauth/oauth.rb#14
OAuth::RESERVED_CHARACTERS = T.let(T.unsafe(nil), Regexp)

# source://oauth//lib/oauth/request_proxy.rb#4
module OAuth::RequestProxy
  class << self
    # source://oauth//lib/oauth/request_proxy.rb#5
    def available_proxies; end

    # @raise [UnknownRequestType]
    #
    # source://oauth//lib/oauth/request_proxy.rb#9
    def proxy(request, options = T.unsafe(nil)); end
  end
end

# source://oauth//lib/oauth/request_proxy/base.rb#8
class OAuth::RequestProxy::Base
  include ::OAuth::Helper

  # @return [Base] a new instance of Base
  #
  # source://oauth//lib/oauth/request_proxy/base.rb#17
  def initialize(request, options = T.unsafe(nil)); end

  # TODO: deprecate these
  #
  # source://oauth//lib/oauth/request_proxy/base.rb#29
  def consumer_key; end

  # source://oauth//lib/oauth/request_proxy/base.rb#89
  def non_oauth_parameters; end

  # source://oauth//lib/oauth/request_proxy/base.rb#33
  def nonce; end

  # See 9.1.1. in specs Normalize Request Parameters
  #
  # source://oauth//lib/oauth/request_proxy/base.rb#104
  def normalized_parameters; end

  # See 9.1.2 in specs
  #
  # source://oauth//lib/oauth/request_proxy/base.rb#98
  def normalized_uri; end

  # OAuth parameters
  #
  # source://oauth//lib/oauth/request_proxy/base.rb#25
  def oauth_callback; end

  # source://oauth//lib/oauth/request_proxy/base.rb#29
  def oauth_consumer_key; end

  # Authorization header for OAuth
  #
  # source://oauth//lib/oauth/request_proxy/base.rb#145
  def oauth_header(options = T.unsafe(nil)); end

  # source://oauth//lib/oauth/request_proxy/base.rb#33
  def oauth_nonce; end

  # source://oauth//lib/oauth/request_proxy/base.rb#85
  def oauth_parameters; end

  # source://oauth//lib/oauth/request_proxy/base.rb#37
  def oauth_signature; end

  # source://oauth//lib/oauth/request_proxy/base.rb#42
  def oauth_signature_method; end

  # source://oauth//lib/oauth/request_proxy/base.rb#51
  def oauth_timestamp; end

  # source://oauth//lib/oauth/request_proxy/base.rb#55
  def oauth_token; end

  # source://oauth//lib/oauth/request_proxy/base.rb#59
  def oauth_verifier; end

  # source://oauth//lib/oauth/request_proxy/base.rb#63
  def oauth_version; end

  # Returns the value of attribute options.
  #
  # source://oauth//lib/oauth/request_proxy/base.rb#15
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://oauth//lib/oauth/request_proxy/base.rb#15
  def options=(_arg0); end

  # Parameter accessors
  #
  # @raise [NotImplementedError]
  #
  # source://oauth//lib/oauth/request_proxy/base.rb#77
  def parameters; end

  # source://oauth//lib/oauth/request_proxy/base.rb#81
  def parameters_for_signature; end

  # @return [Boolean]
  #
  # source://oauth//lib/oauth/request_proxy/base.rb#152
  def query_string_blank?; end

  # Returns the value of attribute request.
  #
  # source://oauth//lib/oauth/request_proxy/base.rb#15
  def request; end

  # Sets the attribute request
  #
  # @param value the value to set the attribute request to.
  #
  # source://oauth//lib/oauth/request_proxy/base.rb#15
  def request=(_arg0); end

  # source://oauth//lib/oauth/request_proxy/base.rb#108
  def sign(options = T.unsafe(nil)); end

  # source://oauth//lib/oauth/request_proxy/base.rb#112
  def sign!(options = T.unsafe(nil)); end

  # source://oauth//lib/oauth/request_proxy/base.rb#37
  def signature; end

  # source://oauth//lib/oauth/request_proxy/base.rb#93
  def signature_and_unsigned_parameters; end

  # See 9.1 in specs
  #
  # source://oauth//lib/oauth/request_proxy/base.rb#119
  def signature_base_string; end

  # source://oauth//lib/oauth/request_proxy/base.rb#42
  def signature_method; end

  # Has this request been signed yet?
  #
  # @return [Boolean]
  #
  # source://oauth//lib/oauth/request_proxy/base.rb#125
  def signed?; end

  # URI, including OAuth parameters
  #
  # source://oauth//lib/oauth/request_proxy/base.rb#130
  def signed_uri(with_oauth: T.unsafe(nil)); end

  # source://oauth//lib/oauth/request_proxy/base.rb#51
  def timestamp; end

  # source://oauth//lib/oauth/request_proxy/base.rb#55
  def token; end

  # Returns the value of attribute unsigned_parameters.
  #
  # source://oauth//lib/oauth/request_proxy/base.rb#15
  def unsigned_parameters; end

  # Sets the attribute unsigned_parameters
  #
  # @param value the value to set the attribute unsigned_parameters to.
  #
  # source://oauth//lib/oauth/request_proxy/base.rb#15
  def unsigned_parameters=(_arg0); end

  protected

  # source://oauth//lib/oauth/request_proxy/base.rb#162
  def header_params; end

  class << self
    # source://oauth//lib/oauth/request_proxy/base.rb#11
    def proxies(klass); end
  end
end

# RequestProxy for Hashes to facilitate simpler signature creation.
# Usage:
#   request = OAuth::RequestProxy.proxy \
#      "method" => "iq",
#      "uri"    => [from, to] * "&",
#      "parameters" => {
#        "oauth_consumer_key"     => oauth_consumer_key,
#        "oauth_token"            => oauth_token,
#        "oauth_signature_method" => "HMAC-SHA1"
#      }
#
#   signature = OAuth::Signature.sign \
#     request,
#     :consumer_secret => oauth_consumer_secret,
#     :token_secret    => oauth_token_secret,
#
# source://oauth//lib/oauth/request_proxy/mock_request.rb#22
class OAuth::RequestProxy::MockRequest < ::OAuth::RequestProxy::Base
  # source://oauth//lib/oauth/request_proxy/mock_request.rb#29
  def method; end

  # source://oauth//lib/oauth/request_proxy/mock_request.rb#33
  def normalized_uri; end

  # source://oauth//lib/oauth/request_proxy/mock_request.rb#25
  def parameters; end

  # source://oauth//lib/oauth/request_proxy/mock_request.rb#41
  def uri; end
end

# source://oauth//lib/oauth/request_proxy/net_http.rb#10
module OAuth::RequestProxy::Net; end

# source://oauth//lib/oauth/request_proxy/net_http.rb#11
module OAuth::RequestProxy::Net::HTTP; end

# source://oauth//lib/oauth/request_proxy/net_http.rb#12
class OAuth::RequestProxy::Net::HTTP::HTTPRequest < ::OAuth::RequestProxy::Base
  # source://oauth//lib/oauth/request_proxy/net_http.rb#31
  def body; end

  # source://oauth//lib/oauth/request_proxy/net_http.rb#15
  def method; end

  # source://oauth//lib/oauth/request_proxy/net_http.rb#23
  def parameters; end

  # source://oauth//lib/oauth/request_proxy/net_http.rb#19
  def uri; end

  private

  # source://oauth//lib/oauth/request_proxy/net_http.rb#37
  def all_parameters; end

  # source://oauth//lib/oauth/request_proxy/net_http.rb#71
  def auth_header_params; end

  # @return [Boolean]
  #
  # source://oauth//lib/oauth/request_proxy/net_http.rb#59
  def form_url_encoded?; end

  # source://oauth//lib/oauth/request_proxy/net_http.rb#67
  def post_params; end

  # source://oauth//lib/oauth/request_proxy/net_http.rb#63
  def query_params; end

  # source://oauth//lib/oauth/request_proxy/net_http.rb#51
  def query_string; end
end

# source://oauth//lib/oauth/request_proxy.rb#25
class OAuth::RequestProxy::UnknownRequestType < ::RuntimeError; end

# The RequestToken is used for the initial Request.
# This is normally created by the Consumer object.
#
# source://oauth//lib/oauth/tokens/request_token.rb#6
class OAuth::RequestToken < ::OAuth::ConsumerToken
  # source://oauth//lib/oauth/tokens/request_token.rb#15
  def authenticate_url(params = T.unsafe(nil)); end

  # Generate an authorization URL for user authorization
  #
  # source://oauth//lib/oauth/tokens/request_token.rb#8
  def authorize_url(params = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://oauth//lib/oauth/tokens/request_token.rb#22
  def callback_confirmed?; end

  # exchange for AccessToken on server
  #
  # source://oauth//lib/oauth/tokens/request_token.rb#27
  def get_access_token(options = T.unsafe(nil), *arguments); end

  protected

  # construct an authorization or authentication url
  #
  # source://oauth//lib/oauth/tokens/request_token.rb#36
  def build_url(base_url, params); end
end

# Used on the server for generating tokens
#
# source://oauth//lib/oauth/tokens/server_token.rb#5
class OAuth::ServerToken < ::OAuth::Token
  # @return [ServerToken] a new instance of ServerToken
  #
  # source://oauth//lib/oauth/tokens/server_token.rb#6
  def initialize; end
end

# source://oauth//lib/oauth/signature.rb#4
module OAuth::Signature
  class << self
    # Returns a list of available signature methods
    #
    # source://oauth//lib/oauth/signature.rb#6
    def available_methods; end

    # Create the body hash for a request
    #
    # source://oauth//lib/oauth/signature.rb#42
    def body_hash(request, options = T.unsafe(nil), &block); end

    # Build a signature from a +request+.
    #
    # Raises UnknownSignatureMethod exception if the signature method is unknown.
    #
    # @raise [UnknownSignatureMethod]
    #
    # source://oauth//lib/oauth/signature.rb#13
    def build(request, options = T.unsafe(nil), &block); end

    # Sign a +request+
    #
    # source://oauth//lib/oauth/signature.rb#25
    def sign(request, options = T.unsafe(nil), &block); end

    # Create the signature base string for +request+. This string is the normalized parameter information.
    #
    # See Also: {OAuth core spec version 1.0, section 9.1.1}[http://oauth.net/core/1.0#rfc.section.9.1.1]
    #
    # source://oauth//lib/oauth/signature.rb#37
    def signature_base_string(request, options = T.unsafe(nil), &block); end

    # Verify the signature of +request+
    #
    # source://oauth//lib/oauth/signature.rb#30
    def verify(request, options = T.unsafe(nil), &block); end
  end
end

# source://oauth//lib/oauth/signature/base.rb#10
class OAuth::Signature::Base
  include ::OAuth::Helper

  # @raise [TypeError]
  # @return [Base] a new instance of Base
  #
  # source://oauth//lib/oauth/signature/base.rb#23
  def initialize(request, options = T.unsafe(nil), &block); end

  # source://oauth//lib/oauth/signature/base.rb#58
  def ==(other); end

  # source://oauth//lib/oauth/signature/base.rb#72
  def body_hash; end

  # Returns the value of attribute consumer_secret.
  #
  # source://oauth//lib/oauth/signature/base.rb#14
  def consumer_secret; end

  # Returns the value of attribute options.
  #
  # source://oauth//lib/oauth/signature/base.rb#13
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://oauth//lib/oauth/signature/base.rb#13
  def options=(_arg0); end

  # Returns the value of attribute request.
  #
  # source://oauth//lib/oauth/signature/base.rb#14
  def request; end

  # source://oauth//lib/oauth/signature/base.rb#54
  def signature; end

  # source://oauth//lib/oauth/signature/base.rb#68
  def signature_base_string; end

  # Returns the value of attribute token_secret.
  #
  # source://oauth//lib/oauth/signature/base.rb#14
  def token_secret; end

  # source://oauth//lib/oauth/signature/base.rb#64
  def verify; end

  private

  # source://oauth//lib/oauth/signature/base.rb#82
  def consumer_key; end

  # source://oauth//lib/oauth/signature/base.rb#94
  def digest; end

  # source://oauth//lib/oauth/signature/base.rb#86
  def nonce; end

  # @raise [NotImplementedError]
  #
  # source://oauth//lib/oauth/signature/base.rb#98
  def raise_instantiation_error; end

  # source://oauth//lib/oauth/signature/base.rb#90
  def secret; end

  # source://oauth//lib/oauth/signature/base.rb#78
  def token; end

  class << self
    # source://oauth//lib/oauth/signature/base.rb#16
    def implements(signature_method = T.unsafe(nil)); end
  end
end

# source://oauth//lib/oauth/signature/hmac/sha1.rb#7
module OAuth::Signature::HMAC; end

# source://oauth//lib/oauth/signature/hmac/sha1.rb#8
class OAuth::Signature::HMAC::SHA1 < ::OAuth::Signature::Base
  # source://oauth//lib/oauth/signature/hmac/sha1.rb#11
  def body_hash; end

  private

  # source://oauth//lib/oauth/signature/hmac/sha1.rb#17
  def digest; end
end

# source://oauth//lib/oauth/signature/hmac/sha256.rb#8
class OAuth::Signature::HMAC::SHA256 < ::OAuth::Signature::Base
  # source://oauth//lib/oauth/signature/hmac/sha256.rb#11
  def body_hash; end

  private

  # source://oauth//lib/oauth/signature/hmac/sha256.rb#17
  def digest; end
end

# source://oauth//lib/oauth/signature/plaintext.rb#7
class OAuth::Signature::PLAINTEXT < ::OAuth::Signature::Base
  # source://oauth//lib/oauth/signature/plaintext.rb#14
  def ==(other); end

  # source://oauth//lib/oauth/signature/plaintext.rb#22
  def body_hash; end

  # source://oauth//lib/oauth/signature/plaintext.rb#10
  def signature; end

  # source://oauth//lib/oauth/signature/plaintext.rb#18
  def signature_base_string; end
end

# source://oauth//lib/oauth/signature/rsa/sha1.rb#7
module OAuth::Signature::RSA; end

# source://oauth//lib/oauth/signature/rsa/sha1.rb#8
class OAuth::Signature::RSA::SHA1 < ::OAuth::Signature::Base
  # source://oauth//lib/oauth/signature/rsa/sha1.rb#11
  def ==(other); end

  # source://oauth//lib/oauth/signature/rsa/sha1.rb#27
  def body_hash; end

  # source://oauth//lib/oauth/signature/rsa/sha1.rb#16
  def public_key; end

  private

  # source://oauth//lib/oauth/signature/rsa/sha1.rb#33
  def decode_public_key; end

  # source://oauth//lib/oauth/signature/rsa/sha1.rb#42
  def digest; end
end

# source://oauth//lib/oauth/signature.rb#46
class OAuth::Signature::UnknownSignatureMethod < ::RuntimeError; end

# Superclass for the various tokens used by OAuth
#
# source://oauth//lib/oauth/tokens/token.rb#5
class OAuth::Token
  include ::OAuth::Helper

  # @return [Token] a new instance of Token
  #
  # source://oauth//lib/oauth/tokens/token.rb#10
  def initialize(token, secret); end

  # Returns the value of attribute secret.
  #
  # source://oauth//lib/oauth/tokens/token.rb#8
  def secret; end

  # Sets the attribute secret
  #
  # @param value the value to set the attribute secret to.
  #
  # source://oauth//lib/oauth/tokens/token.rb#8
  def secret=(_arg0); end

  # source://oauth//lib/oauth/tokens/token.rb#15
  def to_query; end

  # Returns the value of attribute token.
  #
  # source://oauth//lib/oauth/tokens/token.rb#8
  def token; end

  # Sets the attribute token
  #
  # @param value the value to set the attribute token to.
  #
  # source://oauth//lib/oauth/tokens/token.rb#8
  def token=(_arg0); end
end

# source://oauth//lib/oauth/errors/unauthorized.rb#4
class OAuth::Unauthorized < ::OAuth::Error
  # @return [Unauthorized] a new instance of Unauthorized
  #
  # source://oauth//lib/oauth/errors/unauthorized.rb#7
  def initialize(request = T.unsafe(nil)); end

  # Returns the value of attribute request.
  #
  # source://oauth//lib/oauth/errors/unauthorized.rb#5
  def request; end

  # source://oauth//lib/oauth/errors/unauthorized.rb#12
  def to_s; end
end

# source://oauth//lib/oauth/version.rb#4
module OAuth::Version
  extend ::VersionGem::Basic
  extend ::VersionGem::Api
end

# source://oauth//lib/oauth/version.rb#5
OAuth::Version::VERSION = T.let(T.unsafe(nil), String)
