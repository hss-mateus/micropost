# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ar_lazy_preload` gem.
# Please instead update this file by running `bin/tapioca gem ar_lazy_preload`.

# source://ar_lazy_preload//lib/ar_lazy_preload/configuration.rb#3
module ArLazyPreload
  class << self
    # source://ar_lazy_preload//lib/ar_lazy_preload.rb#16
    def config; end

    # source://ar_lazy_preload//lib/ar_lazy_preload.rb#20
    def install_hooks; end
  end
end

# This class is responsible for building context for associated records. Given a list of records
# belonging to the same context and association name it will create and attach a new context to
# the associated records based on the parent association tree.
#
# source://ar_lazy_preload//lib/ar_lazy_preload/associated_context_builder.rb#9
class ArLazyPreload::AssociatedContextBuilder
  # :parent_context - root context
  # :association_name - lazily preloaded association name
  #
  # @return [AssociatedContextBuilder] a new instance of AssociatedContextBuilder
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/associated_context_builder.rb#19
  def initialize(parent_context:, association_name:); end

  # Returns the value of attribute association_name.
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/associated_context_builder.rb#15
  def association_name; end

  # Returns the value of attribute parent_context.
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/associated_context_builder.rb#15
  def parent_context; end

  # Takes all the associated records for the records, attached to the :parent_context and creates
  # a preloading context for them
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/associated_context_builder.rb#27
  def perform; end

  private

  # source://ar_lazy_preload//lib/ar_lazy_preload/associated_context_builder.rb#48
  def child_association_tree; end

  # source://ar_lazy_preload//lib/ar_lazy_preload/associated_context_builder.rb#55
  def reflection_cache; end

  class << self
    # Initiates lazy preload context the records loaded lazily
    #
    # source://ar_lazy_preload//lib/ar_lazy_preload/associated_context_builder.rb#11
    def prepare(**args); end
  end
end

# ActiveRecord::Association patch with a hook for lazy preloading
#
# source://ar_lazy_preload//lib/ar_lazy_preload/active_record/association.rb#5
module ArLazyPreload::Association
  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/association.rb#6
  def load_target; end
end

# ActiveRecord::AssociationRelation patch for setting up lazy_preload_values based on
# owner context
#
# source://ar_lazy_preload//lib/ar_lazy_preload/active_record/association_relation.rb#6
module ArLazyPreload::AssociationRelation
  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/association_relation.rb#7
  def initialize(*args); end

  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/association_relation.rb#13
  def lazy_preload_context(*_arg0, **_arg1, &_arg2); end

  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/association_relation.rb#12
  def proxy_association_owner(*_arg0, **_arg1, &_arg2); end

  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/association_relation.rb#12
  def proxy_association_reflection(*_arg0, **_arg1, &_arg2); end

  private

  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/association_relation.rb#17
  def setup_preloading_context; end
end

# This class is responsible for building association subtrees from a given association tree
# For instance, given a following tree `[:users, { users: :comments }]`,
# #subtree_for will build a subtree `[:comments]` when :users argument is passed
#
# source://ar_lazy_preload//lib/ar_lazy_preload/association_tree_builder.rb#7
class ArLazyPreload::AssociationTreeBuilder
  # @return [AssociationTreeBuilder] a new instance of AssociationTreeBuilder
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/association_tree_builder.rb#10
  def initialize(association_tree); end

  # Returns the value of attribute association_tree.
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/association_tree_builder.rb#8
  def association_tree; end

  # source://ar_lazy_preload//lib/ar_lazy_preload/association_tree_builder.rb#22
  def subtree_for(association); end

  private

  # source://ar_lazy_preload//lib/ar_lazy_preload/association_tree_builder.rb#28
  def subtree_cache; end
end

# ActiveRecord::Base patch with lazy preloading support
#
# source://ar_lazy_preload//lib/ar_lazy_preload/active_record/base.rb#5
module ArLazyPreload::Base
  mixes_in_class_methods ::ArLazyPreload::Base::ClassMethods

  # Returns the value of attribute lazy_preload_context.
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/base.rb#15
  def lazy_preload_context; end

  # Sets the attribute lazy_preload_context
  #
  # @param value the value to set the attribute lazy_preload_context to.
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/base.rb#15
  def lazy_preload_context=(_arg0); end

  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/base.rb#19
  def reload(options = T.unsafe(nil)); end

  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/base.rb#23
  def skip_preload; end

  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/base.rb#17
  def try_preload_lazily(*_arg0, **_arg1, &_arg2); end

  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/base.rb#29
  def try_setup_auto_preload_context; end

  class << self
    # @private
    #
    # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/base.rb#6
    def included(base); end
  end
end

# source://ar_lazy_preload//lib/ar_lazy_preload/active_record/base.rb#33
module ArLazyPreload::Base::ClassMethods
  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/base.rb#34
  def find_by(*args); end
end

# ActiveRecord::CollectionAssociation patch with a hook for lazy preloading
#
# source://ar_lazy_preload//lib/ar_lazy_preload/active_record/collection_association.rb#5
module ArLazyPreload::CollectionAssociation
  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/collection_association.rb#7
  def ids_reader; end
end

# ActiveRecord::CollectionProxy patch for getting records for preload
#
# source://ar_lazy_preload//lib/ar_lazy_preload/active_record/collection_proxy.rb#5
module ArLazyPreload::CollectionProxy
  private

  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/collection_proxy.rb#8
  def ar_lazy_preload_records; end
end

# ArLazyPreload configuration:
#
# - `auto_preload` - load all the associations lazily without
#    an explicit lazy_preload call
#
# source://ar_lazy_preload//lib/ar_lazy_preload/configuration.rb#8
class ArLazyPreload::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/configuration.rb#11
  def initialize; end

  # Returns the value of attribute auto_preload.
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/configuration.rb#9
  def auto_preload; end

  # Sets the attribute auto_preload
  #
  # @param value the value to set the attribute auto_preload to.
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/configuration.rb#9
  def auto_preload=(_arg0); end

  # Returns the value of attribute auto_preload.
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/configuration.rb#9
  def auto_preload?; end
end

# source://ar_lazy_preload//lib/ar_lazy_preload/context.rb#9
class ArLazyPreload::Context
  class << self
    # Initiates lazy preload context for given records
    #
    # source://ar_lazy_preload//lib/ar_lazy_preload/context.rb#11
    def register(records:, association_tree: T.unsafe(nil), auto_preload: T.unsafe(nil)); end
  end
end

# source://ar_lazy_preload//lib/ar_lazy_preload/contexts/base_context.rb#8
module ArLazyPreload::Contexts; end

# This class is responsible for automatic association preloading
#
# source://ar_lazy_preload//lib/ar_lazy_preload/contexts/auto_preload_context.rb#6
class ArLazyPreload::Contexts::AutoPreloadContext < ::ArLazyPreload::Contexts::BaseContext
  # @return [Boolean]
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/contexts/auto_preload_context.rb#7
  def auto_preload?; end

  protected

  # @return [Boolean]
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/contexts/auto_preload_context.rb#13
  def association_needs_preload?(_association_name); end
end

# This is a base context class, which is responsible for holding a connection between a list of
# ActiveRecord::Base objects which have been loaded by the same instance of
# ActiveRecord::Relation.
#
# source://ar_lazy_preload//lib/ar_lazy_preload/contexts/base_context.rb#12
class ArLazyPreload::Contexts::BaseContext
  # :records - array of ActiveRecord instances
  #
  # @return [BaseContext] a new instance of BaseContext
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/contexts/base_context.rb#16
  def initialize(records:); end

  # @api
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/contexts/base_context.rb#24
  def association_tree; end

  # @return [Boolean]
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/contexts/base_context.rb#35
  def auto_preload?; end

  # Returns the value of attribute records.
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/contexts/base_context.rb#13
  def records; end

  # This method checks if the association should be loaded and preloads it for all
  # objects in the context it if needed.
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/contexts/base_context.rb#28
  def try_preload_lazily(association_name); end

  protected

  # @raise [NotImplementedError]
  # @return [Boolean]
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/contexts/base_context.rb#41
  def association_needs_preload?(_association_name); end

  private

  # @return [Boolean]
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/contexts/base_context.rb#71
  def association_loaded?(association_name); end

  # source://ar_lazy_preload//lib/ar_lazy_preload/contexts/base_context.rb#75
  def loaded_association_names; end

  # source://ar_lazy_preload//lib/ar_lazy_preload/contexts/base_context.rb#47
  def perform_preloading(association_name); end

  # Method preloads associations for the specific sets of the records
  # and provides automatically provides context for the records
  # loaded using `includes` inside Relation#preload_associations with the
  # help of the TemporaryPreloadConfig
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/contexts/base_context.rb#65
  def preload_records(association_name, records); end

  # @return [Boolean]
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/contexts/base_context.rb#79
  def preloadable_record?(association_name, record); end

  # @return [Boolean]
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/contexts/base_context.rb#93
  def preloadable_reflection?(klass, reflection); end

  # source://ar_lazy_preload//lib/ar_lazy_preload/contexts/base_context.rb#83
  def preloadable_reflections_cache; end
end

# This class is responsible for lazy preloading. It contains a tree of associations, which were
# requested to be loaded lazily.
#
# source://ar_lazy_preload//lib/ar_lazy_preload/contexts/lazy_preload_context.rb#7
class ArLazyPreload::Contexts::LazyPreloadContext < ::ArLazyPreload::Contexts::BaseContext
  # :records - array of ActiveRecord instances
  # :association_tree - list of symbols or hashes representing a tree of preloadable
  # associations
  #
  # @return [LazyPreloadContext] a new instance of LazyPreloadContext
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/contexts/lazy_preload_context.rb#13
  def initialize(records:, association_tree:); end

  # Returns the value of attribute association_tree.
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/contexts/lazy_preload_context.rb#8
  def association_tree; end

  protected

  # @return [Boolean]
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/contexts/lazy_preload_context.rb#21
  def association_needs_preload?(association_name); end
end

# Preload config that used to enable preloading only for specfic part of the application
#
# source://ar_lazy_preload//lib/ar_lazy_preload/contexts/temporary_preload_config.rb#6
class ArLazyPreload::Contexts::TemporaryPreloadConfig
  class << self
    # @return [Boolean]
    #
    # source://ar_lazy_preload//lib/ar_lazy_preload/contexts/temporary_preload_config.rb#10
    def enabled?; end

    # source://ar_lazy_preload//lib/ar_lazy_preload/contexts/temporary_preload_config.rb#14
    def within_context; end
  end
end

# source://ar_lazy_preload//lib/ar_lazy_preload/contexts/temporary_preload_config.rb#7
ArLazyPreload::Contexts::TemporaryPreloadConfig::THREAD_KEY = T.let(T.unsafe(nil), String)

# ActiveRecord::Relation::Merger patch implementing merge functionality
# for lazy preloadable relations
#
# source://ar_lazy_preload//lib/ar_lazy_preload/active_record/merger.rb#6
module ArLazyPreload::Merger
  # Enhanced #merge implements merging lazy_preload_values
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/merger.rb#8
  def merge; end

  private

  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/merger.rb#24
  def merge_lazy_preloads; end

  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/merger.rb#28
  def reflect_and_merge_lazy_preloads; end
end

# source://ar_lazy_preload//lib/ar_lazy_preload/preloaded_records_converter.rb#4
class ArLazyPreload::PreloadedRecordsConverter
  class << self
    # For different versions of rails we have different records class
    # for ~> 6.1.0 it returns plain array
    # for ~> 6.0.0 it returns ActiveRecord::Relation
    #
    # source://ar_lazy_preload//lib/ar_lazy_preload/preloaded_records_converter.rb#8
    def call(preloaded_records); end
  end
end

# source://ar_lazy_preload//lib/ar_lazy_preload/preloader.rb#4
class ArLazyPreload::Preloader
  # @return [Preloader] a new instance of Preloader
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/preloader.rb#5
  def initialize(records, associations); end

  # source://ar_lazy_preload//lib/ar_lazy_preload/preloader.rb#20
  def preload; end

  class << self
    # source://ar_lazy_preload//lib/ar_lazy_preload/preloader.rb#11
    def patch_for_rails_7!; end
  end
end

# source://ar_lazy_preload//lib/ar_lazy_preload/railtie.rb#4
class ArLazyPreload::Railtie < ::Rails::Railtie; end

# ActiveRecord::Relation patch with lazy preloading support
#
# source://ar_lazy_preload//lib/ar_lazy_preload/active_record/relation.rb#9
module ArLazyPreload::Relation
  # Specify relationships to be loaded lazily when association is loaded for the first time. For
  # example:
  #
  #   users = User.lazy_preload(:posts)
  #   users.each do |user|
  #     user.first_name
  #   end
  #
  # will cause only one SQL request to load users, while
  #
  #   users = User.lazy_preload(:posts)
  #   users.each do |user|
  #     user.posts.map(&:id)
  #   end
  #
  # will make an additional query.
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/relation.rb#66
  def lazy_preload(*args); end

  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/relation.rb#71
  def lazy_preload!(*args); end

  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/relation.rb#77
  def lazy_preload_values; end

  # Enhanced #load method will check if association has not been loaded yet and add a context
  # for lazy preloading to loaded each record
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/relation.rb#25
  def load; end

  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/relation.rb#12
  def preload_associations(records); end

  # Lazily autoloads all associations. For example:
  #
  #   users = User.preload_associations_lazily
  #   users.each do |user|
  #     user.posts.flat_map {|post| post.comments.map(&:id)}
  #   end
  #
  # Same effect can be achieved by User.lazy_preload(posts: :comments)
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/relation.rb#46
  def preload_associations_lazily; end

  # Sets the attribute preloads_associations_lazily
  #
  # @param value the value to set the attribute preloads_associations_lazily to.
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/relation.rb#10
  def preloads_associations_lazily=(_arg0); end

  private

  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/relation.rb#83
  def ar_lazy_preload_records; end

  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/relation.rb#91
  def handle_preloaded_records(preloaded_records); end

  # Sets the attribute lazy_preload_values
  #
  # @param value the value to set the attribute lazy_preload_values to.
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/relation.rb#105
  def lazy_preload_values=(_arg0); end

  # @return [Boolean]
  #
  # source://ar_lazy_preload//lib/ar_lazy_preload/active_record/relation.rb#87
  def preloads_associations_lazily?; end
end
