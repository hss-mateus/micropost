# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::CreateStmt`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::CreateStmt`.

class PgQuery::CreateStmt
  sig do
    params(
      access_method: T.nilable(String),
      constraints: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      if_not_exists: T.nilable(T::Boolean),
      inh_relations: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      of_typename: T.nilable(PgQuery::TypeName),
      oncommit: T.nilable(T.any(Symbol, Integer)),
      options: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      partbound: T.nilable(PgQuery::PartitionBoundSpec),
      partspec: T.nilable(PgQuery::PartitionSpec),
      relation: T.nilable(PgQuery::RangeVar),
      table_elts: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      tablespacename: T.nilable(String)
    ).void
  end
  def initialize(access_method: nil, constraints: Google::Protobuf::RepeatedField.new(:message, PgQuery::Node), if_not_exists: nil, inh_relations: Google::Protobuf::RepeatedField.new(:message, PgQuery::Node), of_typename: nil, oncommit: nil, options: Google::Protobuf::RepeatedField.new(:message, PgQuery::Node), partbound: nil, partspec: nil, relation: nil, table_elts: Google::Protobuf::RepeatedField.new(:message, PgQuery::Node), tablespacename: nil); end

  sig { returns(String) }
  def access_method; end

  sig { params(value: String).void }
  def access_method=(value); end

  sig { void }
  def clear_access_method; end

  sig { void }
  def clear_constraints; end

  sig { void }
  def clear_if_not_exists; end

  sig { void }
  def clear_inh_relations; end

  sig { void }
  def clear_of_typename; end

  sig { void }
  def clear_oncommit; end

  sig { void }
  def clear_options; end

  sig { void }
  def clear_partbound; end

  sig { void }
  def clear_partspec; end

  sig { void }
  def clear_relation; end

  sig { void }
  def clear_table_elts; end

  sig { void }
  def clear_tablespacename; end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def constraints; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def constraints=(value); end

  sig { returns(T::Boolean) }
  def if_not_exists; end

  sig { params(value: T::Boolean).void }
  def if_not_exists=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def inh_relations; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def inh_relations=(value); end

  sig { returns(T.nilable(PgQuery::TypeName)) }
  def of_typename; end

  sig { params(value: T.nilable(PgQuery::TypeName)).void }
  def of_typename=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def oncommit; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def oncommit=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def options; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def options=(value); end

  sig { returns(T.nilable(PgQuery::PartitionBoundSpec)) }
  def partbound; end

  sig { params(value: T.nilable(PgQuery::PartitionBoundSpec)).void }
  def partbound=(value); end

  sig { returns(T.nilable(PgQuery::PartitionSpec)) }
  def partspec; end

  sig { params(value: T.nilable(PgQuery::PartitionSpec)).void }
  def partspec=(value); end

  sig { returns(T.nilable(PgQuery::RangeVar)) }
  def relation; end

  sig { params(value: T.nilable(PgQuery::RangeVar)).void }
  def relation=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def table_elts; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def table_elts=(value); end

  sig { returns(String) }
  def tablespacename; end

  sig { params(value: String).void }
  def tablespacename=(value); end
end
