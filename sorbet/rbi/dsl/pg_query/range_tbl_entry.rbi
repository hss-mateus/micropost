# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PgQuery::RangeTblEntry`.
# Please instead update this file by running `bin/tapioca dsl PgQuery::RangeTblEntry`.

class PgQuery::RangeTblEntry
  sig do
    params(
      alias: T.nilable(PgQuery::Alias),
      check_as_user: T.nilable(Integer),
      colcollations: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      coltypes: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      coltypmods: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      ctelevelsup: T.nilable(Integer),
      ctename: T.nilable(String),
      enrname: T.nilable(String),
      enrtuples: T.nilable(Float),
      eref: T.nilable(PgQuery::Alias),
      extra_updated_cols: T.nilable(T.any(Google::Protobuf::RepeatedField[Integer], T::Array[Integer])),
      funcordinality: T.nilable(T::Boolean),
      functions: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      in_from_cl: T.nilable(T::Boolean),
      inh: T.nilable(T::Boolean),
      inserted_cols: T.nilable(T.any(Google::Protobuf::RepeatedField[Integer], T::Array[Integer])),
      join_using_alias: T.nilable(PgQuery::Alias),
      joinaliasvars: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      joinleftcols: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      joinmergedcols: T.nilable(Integer),
      joinrightcols: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      jointype: T.nilable(T.any(Symbol, Integer)),
      lateral: T.nilable(T::Boolean),
      relid: T.nilable(Integer),
      relkind: T.nilable(String),
      rellockmode: T.nilable(Integer),
      required_perms: T.nilable(Integer),
      rtekind: T.nilable(T.any(Symbol, Integer)),
      security_barrier: T.nilable(T::Boolean),
      security_quals: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node])),
      selected_cols: T.nilable(T.any(Google::Protobuf::RepeatedField[Integer], T::Array[Integer])),
      self_reference: T.nilable(T::Boolean),
      subquery: T.nilable(PgQuery::Query),
      tablefunc: T.nilable(PgQuery::TableFunc),
      tablesample: T.nilable(PgQuery::TableSampleClause),
      updated_cols: T.nilable(T.any(Google::Protobuf::RepeatedField[Integer], T::Array[Integer])),
      values_lists: T.nilable(T.any(Google::Protobuf::RepeatedField[PgQuery::Node], T::Array[PgQuery::Node]))
    ).void
  end
  def initialize(alias: nil, check_as_user: nil, colcollations: Google::Protobuf::RepeatedField.new(:message, PgQuery::Node), coltypes: Google::Protobuf::RepeatedField.new(:message, PgQuery::Node), coltypmods: Google::Protobuf::RepeatedField.new(:message, PgQuery::Node), ctelevelsup: nil, ctename: nil, enrname: nil, enrtuples: nil, eref: nil, extra_updated_cols: Google::Protobuf::RepeatedField.new(:uint64), funcordinality: nil, functions: Google::Protobuf::RepeatedField.new(:message, PgQuery::Node), in_from_cl: nil, inh: nil, inserted_cols: Google::Protobuf::RepeatedField.new(:uint64), join_using_alias: nil, joinaliasvars: Google::Protobuf::RepeatedField.new(:message, PgQuery::Node), joinleftcols: Google::Protobuf::RepeatedField.new(:message, PgQuery::Node), joinmergedcols: nil, joinrightcols: Google::Protobuf::RepeatedField.new(:message, PgQuery::Node), jointype: nil, lateral: nil, relid: nil, relkind: nil, rellockmode: nil, required_perms: nil, rtekind: nil, security_barrier: nil, security_quals: Google::Protobuf::RepeatedField.new(:message, PgQuery::Node), selected_cols: Google::Protobuf::RepeatedField.new(:uint64), self_reference: nil, subquery: nil, tablefunc: nil, tablesample: nil, updated_cols: Google::Protobuf::RepeatedField.new(:uint64), values_lists: Google::Protobuf::RepeatedField.new(:message, PgQuery::Node)); end

  sig { returns(T.nilable(PgQuery::Alias)) }
  def alias; end

  sig { params(value: T.nilable(PgQuery::Alias)).void }
  def alias=(value); end

  sig { returns(Integer) }
  def check_as_user; end

  sig { params(value: Integer).void }
  def check_as_user=(value); end

  sig { void }
  def clear_alias; end

  sig { void }
  def clear_check_as_user; end

  sig { void }
  def clear_colcollations; end

  sig { void }
  def clear_coltypes; end

  sig { void }
  def clear_coltypmods; end

  sig { void }
  def clear_ctelevelsup; end

  sig { void }
  def clear_ctename; end

  sig { void }
  def clear_enrname; end

  sig { void }
  def clear_enrtuples; end

  sig { void }
  def clear_eref; end

  sig { void }
  def clear_extra_updated_cols; end

  sig { void }
  def clear_funcordinality; end

  sig { void }
  def clear_functions; end

  sig { void }
  def clear_in_from_cl; end

  sig { void }
  def clear_inh; end

  sig { void }
  def clear_inserted_cols; end

  sig { void }
  def clear_join_using_alias; end

  sig { void }
  def clear_joinaliasvars; end

  sig { void }
  def clear_joinleftcols; end

  sig { void }
  def clear_joinmergedcols; end

  sig { void }
  def clear_joinrightcols; end

  sig { void }
  def clear_jointype; end

  sig { void }
  def clear_lateral; end

  sig { void }
  def clear_relid; end

  sig { void }
  def clear_relkind; end

  sig { void }
  def clear_rellockmode; end

  sig { void }
  def clear_required_perms; end

  sig { void }
  def clear_rtekind; end

  sig { void }
  def clear_security_barrier; end

  sig { void }
  def clear_security_quals; end

  sig { void }
  def clear_selected_cols; end

  sig { void }
  def clear_self_reference; end

  sig { void }
  def clear_subquery; end

  sig { void }
  def clear_tablefunc; end

  sig { void }
  def clear_tablesample; end

  sig { void }
  def clear_updated_cols; end

  sig { void }
  def clear_values_lists; end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def colcollations; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def colcollations=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def coltypes; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def coltypes=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def coltypmods; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def coltypmods=(value); end

  sig { returns(Integer) }
  def ctelevelsup; end

  sig { params(value: Integer).void }
  def ctelevelsup=(value); end

  sig { returns(String) }
  def ctename; end

  sig { params(value: String).void }
  def ctename=(value); end

  sig { returns(String) }
  def enrname; end

  sig { params(value: String).void }
  def enrname=(value); end

  sig { returns(Float) }
  def enrtuples; end

  sig { params(value: Float).void }
  def enrtuples=(value); end

  sig { returns(T.nilable(PgQuery::Alias)) }
  def eref; end

  sig { params(value: T.nilable(PgQuery::Alias)).void }
  def eref=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Integer]) }
  def extra_updated_cols; end

  sig { params(value: Google::Protobuf::RepeatedField[Integer]).void }
  def extra_updated_cols=(value); end

  sig { returns(T::Boolean) }
  def funcordinality; end

  sig { params(value: T::Boolean).void }
  def funcordinality=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def functions; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def functions=(value); end

  sig { returns(T::Boolean) }
  def in_from_cl; end

  sig { params(value: T::Boolean).void }
  def in_from_cl=(value); end

  sig { returns(T::Boolean) }
  def inh; end

  sig { params(value: T::Boolean).void }
  def inh=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Integer]) }
  def inserted_cols; end

  sig { params(value: Google::Protobuf::RepeatedField[Integer]).void }
  def inserted_cols=(value); end

  sig { returns(T.nilable(PgQuery::Alias)) }
  def join_using_alias; end

  sig { params(value: T.nilable(PgQuery::Alias)).void }
  def join_using_alias=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def joinaliasvars; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def joinaliasvars=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def joinleftcols; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def joinleftcols=(value); end

  sig { returns(Integer) }
  def joinmergedcols; end

  sig { params(value: Integer).void }
  def joinmergedcols=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def joinrightcols; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def joinrightcols=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def jointype; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def jointype=(value); end

  sig { returns(T::Boolean) }
  def lateral; end

  sig { params(value: T::Boolean).void }
  def lateral=(value); end

  sig { returns(Integer) }
  def relid; end

  sig { params(value: Integer).void }
  def relid=(value); end

  sig { returns(String) }
  def relkind; end

  sig { params(value: String).void }
  def relkind=(value); end

  sig { returns(Integer) }
  def rellockmode; end

  sig { params(value: Integer).void }
  def rellockmode=(value); end

  sig { returns(Integer) }
  def required_perms; end

  sig { params(value: Integer).void }
  def required_perms=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def rtekind; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def rtekind=(value); end

  sig { returns(T::Boolean) }
  def security_barrier; end

  sig { params(value: T::Boolean).void }
  def security_barrier=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def security_quals; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def security_quals=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Integer]) }
  def selected_cols; end

  sig { params(value: Google::Protobuf::RepeatedField[Integer]).void }
  def selected_cols=(value); end

  sig { returns(T::Boolean) }
  def self_reference; end

  sig { params(value: T::Boolean).void }
  def self_reference=(value); end

  sig { returns(T.nilable(PgQuery::Query)) }
  def subquery; end

  sig { params(value: T.nilable(PgQuery::Query)).void }
  def subquery=(value); end

  sig { returns(T.nilable(PgQuery::TableFunc)) }
  def tablefunc; end

  sig { params(value: T.nilable(PgQuery::TableFunc)).void }
  def tablefunc=(value); end

  sig { returns(T.nilable(PgQuery::TableSampleClause)) }
  def tablesample; end

  sig { params(value: T.nilable(PgQuery::TableSampleClause)).void }
  def tablesample=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Integer]) }
  def updated_cols; end

  sig { params(value: Google::Protobuf::RepeatedField[Integer]).void }
  def updated_cols=(value); end

  sig { returns(Google::Protobuf::RepeatedField[PgQuery::Node]) }
  def values_lists; end

  sig { params(value: Google::Protobuf::RepeatedField[PgQuery::Node]).void }
  def values_lists=(value); end
end
