# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `User`.
# Please instead update this file by running `bin/tapioca dsl User`.

class User
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::User]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::User)) }
    def fifth; end

    sig { returns(::User) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::User)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::User) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::User).void)
      ).returns(T.nilable(T::Enumerator[::User]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::User]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::User]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::User)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::User) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::User) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::User) }
    def first!; end

    sig { returns(T.nilable(::User)) }
    def forty_two; end

    sig { returns(::User) }
    def forty_two!; end

    sig { returns(T.nilable(::User)) }
    def fourth; end

    sig { returns(::User) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::User) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::User)) }
    def second; end

    sig { returns(::User) }
    def second!; end

    sig { returns(T.nilable(::User)) }
    def second_to_last; end

    sig { returns(::User) }
    def second_to_last!; end

    sig { returns(::User) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::User) }
    def take!; end

    sig { returns(T.nilable(::User)) }
    def third; end

    sig { returns(::User) }
    def third!; end

    sig { returns(T.nilable(::User)) }
    def third_to_last; end

    sig { returns(::User) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def active_relationship_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def active_relationship_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :active_relationships`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Relationship::PrivateCollectionProxy) }
    def active_relationships; end

    sig { params(value: T::Enumerable[::Relationship]).void }
    def active_relationships=(value); end

    sig { returns(T::Array[T.untyped]) }
    def follower_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def follower_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :followers, through: :passive_relationships`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def followers; end

    sig { params(value: T::Enumerable[::User]).void }
    def followers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def following_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def following_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def following_micropost_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def following_micropost_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :following_microposts, through: :followings`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Micropost::PrivateCollectionProxy) }
    def following_microposts; end

    sig { params(value: T::Enumerable[::Micropost]).void }
    def following_microposts=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :followings, through: :active_relationships`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def followings; end

    sig { params(value: T::Enumerable[::User]).void }
    def followings=(value); end

    sig { returns(T::Array[T.untyped]) }
    def micropost_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def micropost_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :microposts`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Micropost::PrivateCollectionProxy) }
    def microposts; end

    sig { params(value: T::Enumerable[::Micropost]).void }
    def microposts=(value); end

    sig { returns(T::Array[T.untyped]) }
    def passive_relationship_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def passive_relationship_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :passive_relationships`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Relationship::PrivateCollectionProxy) }
    def passive_relationships; end

    sig { params(value: T::Enumerable[::Relationship]).void }
    def passive_relationships=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Integer)) }
    def access_count_to_reset_password_page; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def access_count_to_reset_password_page=(value); end

    sig { returns(T::Boolean) }
    def access_count_to_reset_password_page?; end

    sig { returns(T.nilable(::Integer)) }
    def access_count_to_reset_password_page_before_last_save; end

    sig { returns(T.untyped) }
    def access_count_to_reset_password_page_before_type_cast; end

    sig { returns(T::Boolean) }
    def access_count_to_reset_password_page_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def access_count_to_reset_password_page_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def access_count_to_reset_password_page_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def access_count_to_reset_password_page_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def access_count_to_reset_password_page_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def access_count_to_reset_password_page_previous_change; end

    sig { returns(T::Boolean) }
    def access_count_to_reset_password_page_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def access_count_to_reset_password_page_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def access_count_to_reset_password_page_was; end

    sig { void }
    def access_count_to_reset_password_page_will_change!; end

    sig { returns(T.nilable(::String)) }
    def activation_state; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def activation_state=(value); end

    sig { returns(T::Boolean) }
    def activation_state?; end

    sig { returns(T.nilable(::String)) }
    def activation_state_before_last_save; end

    sig { returns(T.untyped) }
    def activation_state_before_type_cast; end

    sig { returns(T::Boolean) }
    def activation_state_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def activation_state_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def activation_state_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def activation_state_changed?; end

    sig { returns(T.nilable(::String)) }
    def activation_state_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def activation_state_previous_change; end

    sig { returns(T::Boolean) }
    def activation_state_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def activation_state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def activation_state_was; end

    sig { void }
    def activation_state_will_change!; end

    sig { returns(T.nilable(::String)) }
    def activation_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def activation_token=(value); end

    sig { returns(T::Boolean) }
    def activation_token?; end

    sig { returns(T.nilable(::String)) }
    def activation_token_before_last_save; end

    sig { returns(T.untyped) }
    def activation_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def activation_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def activation_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def activation_token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def activation_token_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def activation_token_expires_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def activation_token_expires_at=(value); end

    sig { returns(T::Boolean) }
    def activation_token_expires_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def activation_token_expires_at_before_last_save; end

    sig { returns(T.untyped) }
    def activation_token_expires_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def activation_token_expires_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def activation_token_expires_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def activation_token_expires_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def activation_token_expires_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def activation_token_expires_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def activation_token_expires_at_previous_change; end

    sig { returns(T::Boolean) }
    def activation_token_expires_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def activation_token_expires_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def activation_token_expires_at_was; end

    sig { void }
    def activation_token_expires_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def activation_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def activation_token_previous_change; end

    sig { returns(T::Boolean) }
    def activation_token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def activation_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def activation_token_was; end

    sig { void }
    def activation_token_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def admin=(value); end

    sig { returns(T::Boolean) }
    def admin?; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_before_last_save; end

    sig { returns(T.untyped) }
    def admin_before_type_cast; end

    sig { returns(T::Boolean) }
    def admin_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def admin_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def admin_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def admin_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def admin_previous_change; end

    sig { returns(T::Boolean) }
    def admin_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_was; end

    sig { void }
    def admin_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def crypted_password; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def crypted_password=(value); end

    sig { returns(T::Boolean) }
    def crypted_password?; end

    sig { returns(T.nilable(::String)) }
    def crypted_password_before_last_save; end

    sig { returns(T.untyped) }
    def crypted_password_before_type_cast; end

    sig { returns(T::Boolean) }
    def crypted_password_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def crypted_password_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def crypted_password_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def crypted_password_changed?; end

    sig { returns(T.nilable(::String)) }
    def crypted_password_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def crypted_password_previous_change; end

    sig { returns(T::Boolean) }
    def crypted_password_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def crypted_password_previously_was; end

    sig { returns(T.nilable(::String)) }
    def crypted_password_was; end

    sig { void }
    def crypted_password_will_change!; end

    sig { returns(T.nilable(::String)) }
    def email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def email=(value); end

    sig { returns(T::Boolean) }
    def email?; end

    sig { returns(T.nilable(::String)) }
    def email_before_last_save; end

    sig { returns(T.untyped) }
    def email_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def email_changed?; end

    sig { returns(T.nilable(::String)) }
    def email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_previous_change; end

    sig { returns(T::Boolean) }
    def email_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def email_was; end

    sig { void }
    def email_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def name_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_previous_change; end

    sig { returns(T::Boolean) }
    def name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def remember_me_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def remember_me_token=(value); end

    sig { returns(T::Boolean) }
    def remember_me_token?; end

    sig { returns(T.nilable(::String)) }
    def remember_me_token_before_last_save; end

    sig { returns(T.untyped) }
    def remember_me_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def remember_me_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remember_me_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remember_me_token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def remember_me_token_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_me_token_expires_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_me_token_expires_at=(value); end

    sig { returns(T::Boolean) }
    def remember_me_token_expires_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_me_token_expires_at_before_last_save; end

    sig { returns(T.untyped) }
    def remember_me_token_expires_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def remember_me_token_expires_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_me_token_expires_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_me_token_expires_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def remember_me_token_expires_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_me_token_expires_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_me_token_expires_at_previous_change; end

    sig { returns(T::Boolean) }
    def remember_me_token_expires_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_me_token_expires_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_me_token_expires_at_was; end

    sig { void }
    def remember_me_token_expires_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def remember_me_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remember_me_token_previous_change; end

    sig { returns(T::Boolean) }
    def remember_me_token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def remember_me_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def remember_me_token_was; end

    sig { void }
    def remember_me_token_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_email_sent_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_email_sent_at=(value); end

    sig { returns(T::Boolean) }
    def reset_password_email_sent_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_email_sent_at_before_last_save; end

    sig { returns(T.untyped) }
    def reset_password_email_sent_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def reset_password_email_sent_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reset_password_email_sent_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reset_password_email_sent_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def reset_password_email_sent_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_email_sent_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reset_password_email_sent_at_previous_change; end

    sig { returns(T::Boolean) }
    def reset_password_email_sent_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_email_sent_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_email_sent_at_was; end

    sig { void }
    def reset_password_email_sent_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def reset_password_token=(value); end

    sig { returns(T::Boolean) }
    def reset_password_token?; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_before_last_save; end

    sig { returns(T.untyped) }
    def reset_password_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def reset_password_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reset_password_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reset_password_token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def reset_password_token_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_token_expires_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_token_expires_at=(value); end

    sig { returns(T::Boolean) }
    def reset_password_token_expires_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_token_expires_at_before_last_save; end

    sig { returns(T.untyped) }
    def reset_password_token_expires_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def reset_password_token_expires_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reset_password_token_expires_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reset_password_token_expires_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def reset_password_token_expires_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_token_expires_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reset_password_token_expires_at_previous_change; end

    sig { returns(T::Boolean) }
    def reset_password_token_expires_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_token_expires_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_token_expires_at_was; end

    sig { void }
    def reset_password_token_expires_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reset_password_token_previous_change; end

    sig { returns(T::Boolean) }
    def reset_password_token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_was; end

    sig { void }
    def reset_password_token_will_change!; end

    sig { void }
    def restore_access_count_to_reset_password_page!; end

    sig { void }
    def restore_activation_state!; end

    sig { void }
    def restore_activation_token!; end

    sig { void }
    def restore_activation_token_expires_at!; end

    sig { void }
    def restore_admin!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_crypted_password!; end

    sig { void }
    def restore_email!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_remember_me_token!; end

    sig { void }
    def restore_remember_me_token_expires_at!; end

    sig { void }
    def restore_reset_password_email_sent_at!; end

    sig { void }
    def restore_reset_password_token!; end

    sig { void }
    def restore_reset_password_token_expires_at!; end

    sig { void }
    def restore_salt!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable(::String)) }
    def salt; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def salt=(value); end

    sig { returns(T::Boolean) }
    def salt?; end

    sig { returns(T.nilable(::String)) }
    def salt_before_last_save; end

    sig { returns(T.untyped) }
    def salt_before_type_cast; end

    sig { returns(T::Boolean) }
    def salt_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def salt_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def salt_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def salt_changed?; end

    sig { returns(T.nilable(::String)) }
    def salt_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def salt_previous_change; end

    sig { returns(T::Boolean) }
    def salt_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def salt_previously_was; end

    sig { returns(T.nilable(::String)) }
    def salt_was; end

    sig { void }
    def salt_will_change!; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_access_count_to_reset_password_page; end

    sig { returns(T::Boolean) }
    def saved_change_to_access_count_to_reset_password_page?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_activation_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_activation_state?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_activation_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_activation_token?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_activation_token_expires_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_activation_token_expires_at?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_admin; end

    sig { returns(T::Boolean) }
    def saved_change_to_admin?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_crypted_password; end

    sig { returns(T::Boolean) }
    def saved_change_to_crypted_password?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_email?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_remember_me_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_remember_me_token?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_remember_me_token_expires_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_remember_me_token_expires_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_reset_password_email_sent_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_reset_password_email_sent_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_reset_password_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_reset_password_token?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_reset_password_token_expires_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_reset_password_token_expires_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_salt; end

    sig { returns(T::Boolean) }
    def saved_change_to_salt?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_access_count_to_reset_password_page?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_activation_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_activation_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_activation_token_expires_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_admin?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_crypted_password?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_remember_me_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_remember_me_token_expires_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reset_password_email_sent_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reset_password_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reset_password_token_expires_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_salt?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::User } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::User, Integer, String, T::Enumerable[T.any(::User, Integer, String, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::User, Integer, String, T::Enumerable[T.any(::User, Integer, String, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def destroy(*records); end

    sig { returns(T::Array[::User]) }
    def load_target; end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::User]) }
    def target; end

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::User } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
